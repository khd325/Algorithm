import math

check = []
answer = 0
result = set()


def dfs(depth, n, num, numbers, visited):
    if depth == n:
        global answer
        global check
        temp = int(num)

        if check[temp]:
            result.add(temp)
        return

    for i in range(len(numbers)):
        if not visited[i]:
            visited[i] = True

            dfs(depth + 1, n, num + numbers[i], numbers, visited)
            visited[i] = False


def solution(numbers):
    numbers = list(numbers)

    visited = [False] * len(numbers)

    global check
    check = [True] * (int('9' * len(numbers)) + 1)
    check[1] = False
    check[0] = False
    n = len(check)

    for i in range(2, int(math.sqrt(n) + 1)):
        if check[i]:
            j = 2
            while i * j < n:
                check[i * j] = False
                j += 1

    for i in range(1, len(numbers) + 1):
        dfs(0, i, '', numbers, visited)

    return len(result)
